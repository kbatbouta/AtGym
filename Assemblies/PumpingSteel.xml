<?xml version="1.0"?>
<doc>
    <assembly>
        <name>PumpingSteel</name>
    </assembly>
    <members>
        <member name="T:PumpingSteel.Core.Capacities.FitnessCapacitiesDefOf">
            <summary>
                Container for new capacities defs used by the mod
            </summary>
        </member>
        <member name="T:PumpingSteel.Core.Hediffs.FitnessHediffsDefOf">
            <summary>
                Container for Hediffs defs used by the mod
            </summary>
        </member>
        <member name="T:PumpingSteel.Fitness.IFitnessTracker`1">
            <summary>
                FitnessTracker is WorldComponent used as container and shell for storing FitnessUnits for each pawn.
                It provide caching and scribing operation.
            </summary>
        </member>
        <member name="M:PumpingSteel.Fitness.IFitnessTracker`1.TryGet(Verse.Pawn,`0@)">
            <summary>
                Provide null safe and access to FitnessUnits.
            </summary>
            <param name="pawn">SelPawn</param>
            <param name="unit">Output FitnessUnit for said pawn</param>
            <returns>(bool) Found</returns>
        </member>
        <member name="M:PumpingSteel.Fitness.IFitnessTracker`1.Register(`0)">
            <summary>
                Used to register a new pawn with the tracker.
                NOTE: field FitnessUnit.pawn must be not null and set to a pawn.
            </summary>
            <param name="unit"></param>
        </member>
        <member name="T:PumpingSteel.Fitness.StaminaTracker">
            <summary>
                FitnessTracker is WorldComponent used as container and shell for storing FitnessUnits for each pawn.
                It provide caching and scribing operation.
            </summary>
        </member>
        <member name="P:PumpingSteel.Fitness.StaminaTracker.Units">
            <summary>
                Return all available FitnessUnits.
            </summary>
        </member>
        <member name="M:PumpingSteel.Fitness.StaminaTracker.TryGet(Verse.Pawn,PumpingSteel.Fitness.StaminaUnit@)">
            <summary>
                Provide null safe and access to FitnessUnits.
            </summary>
            <param name="pawn">SelPawn</param>
            <param name="unit">Output FitnessUnit for said pawn</param>
            <returns>(bool) Found</returns>
        </member>
        <member name="M:PumpingSteel.Fitness.StaminaTracker.Register(PumpingSteel.Fitness.StaminaUnit)">
            <summary>
                Used to register a new pawn with the tracker.
                NOTE: field FitnessUnit.pawn must be not null and set to a pawn.
            </summary>
            <param name="unit"></param>
        </member>
        <member name="T:PumpingSteel.Fitness.FitnessTracker">
            <summary>
                FitnessTracker is WorldComponent used as container and shell for storing FitnessUnits for each pawn.
                It provide caching and scribing operation.
            </summary>
        </member>
        <member name="P:PumpingSteel.Fitness.FitnessTracker.Units">
            <summary>
                Return all available FitnessUnits.
            </summary>
        </member>
        <member name="M:PumpingSteel.Fitness.FitnessTracker.TryGet(Verse.Pawn,PumpingSteel.Fitness.FitnessBodyUnit@)">
            <summary>
                Provide null safe and access to FitnessUnits.
            </summary>
            <param name="pawn">SelPawn</param>
            <param name="unit">Output FitnessUnit for said pawn</param>
            <returns>(bool) Found</returns>
        </member>
        <member name="M:PumpingSteel.Fitness.FitnessTracker.Register(PumpingSteel.Fitness.FitnessBodyUnit)">
            <summary>
                Used to register a new pawn with the tracker.
                NOTE: field FitnessUnit.pawn must be not null and set to a pawn.
            </summary>
            <param name="unit"></param>
        </member>
        <member name="T:PumpingSteel.Patches.H_JobGiver_Work_GetPriority">
            <summary>
            Fix for the infamous "return not implemented Exception" in each of the main roots (GetPriority) for each possible timeslot activity.
            The solution is to deny entry to this tree if the current time slot is Workout to avoid the error. 
            </summary>
        </member>
        <member name="T:PumpingSteel.Patches.H_PathFollower_Destination">
            <summary>
            When ever a pawn try to start a new pather cycle, this patch notify the staminaComp of
            this event inoder to maintain a accurate tracking of movement.
            </summary>
        </member>
        <member name="T:PumpingSteel.Patches.H_PathFollower_StartPath">
            <summary>
            Patching the main interaction point between pawns_pathfollower and the pathfinder.
            </summary>
        </member>
        <member name="T:PumpingSteel.Patches.H_StatWorker_Movement">
            <summary>
            Used to patch the movement speed stats.
            </summary>
        </member>
        <member name="M:PumpingSteel.Patches.H_StatWorker_Movement.Postfix(RimWorld.StatRequest,System.Single@,RimWorld.StatDef)">
            <summary>
            Used tp "edit"/modify the movment speed of pawns.
            </summary>
            <param name="req"></param>
            <param name="__result"></param>
            <param name="___stat"></param>
        </member>
    </members>
</doc>
